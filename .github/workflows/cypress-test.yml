name: Pre merge cypress tests

on:
  pull_request:
    paths:
      - 'cypress/e2e/**'
      - 'cypress/support/**'

jobs:
  run-tests:
    name: Run Cypress Tests
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install dependencies
        run: npm install

      - name: Run Cypress tests
        run: npm run test-ui-headless

      - name: Upload Cypress test report
        uses: actions/upload-artifact@v3
        with:
          name: cypress-report
          path: |
            cypress/reports/merged-report.html
            cypress/reports/assets/

      - name: Extract test data from JSON files
        id: extract-test-data
        run: |
          # Initialize the Markdown file for the report summary
          echo "| **Category** | **Total Tests** | **Passed** | **Failed** |" > test-report-summary.md
          echo "|--------------|-----------------|------------|------------|" >> test-report-summary.md
      
          # Initialize variables to track if any tests failed
          echo "build_failed=false" >> $GITHUB_ENV
      
          # Initialize counters for API and UI tests
          totalApiTests=0
          passedApiTests=0
          failedApiTests=0
      
          totalUiTests=0
          passedUiTests=0
          failedUiTests=0
      
          # Loop through all JSON report files
          for report_file in "${REPORT_FILES}"; do
            if [ -f "$report_file" ]; then
              # Extract results specific to API tests
              apiResults=$(jq '[.results[] | select(.file | contains("cypress/e2e/apiTests"))]' "$report_file")
              apiTests=$(echo "$apiResults" | jq 'map(.stats.tests) | add // 0')
              apiPasses=$(echo "$apiResults" | jq 'map(.stats.passes) | add // 0')
              apiFailures=$(echo "$apiResults" | jq 'map(.stats.failures) | add // 0')
      
              totalApiTests=$((totalApiTests + ${apiTests:-0}))
              passedApiTests=$((passedApiTests + ${apiPasses:-0}))
              failedApiTests=$((failedApiTests + ${apiFailures:-0}))
      
              # Extract results specific to UI tests
              uiResults=$(jq '[.results[] | select(.file | contains("cypress/e2e/uiTests"))]' "$report_file")
              uiTests=$(echo "$uiResults" | jq 'map(.stats.tests) | add // 0')
              uiPasses=$(echo "$uiResults" | jq 'map(.stats.passes) | add // 0')
              uiFailures=$(echo "$uiResults" | jq 'map(.stats.failures) | add // 0')
      
              totalUiTests=$((totalUiTests + ${uiTests:-0}))
              passedUiTests=$((passedUiTests + ${uiPasses:-0}))
              failedUiTests=$((failedUiTests + ${uiFailures:-0}))
      
              # Mark build as failed if any API or UI test fails
              if [ "${apiFailures:-0}" -ne 0 ] || [ "${uiFailures:-0}" -ne 0 ]; then
                echo "build_failed=true" >> $GITHUB_ENV
              fi
            fi
          done
      
          # Append API test results to the Markdown file
          echo "| API Tests    | $totalApiTests       | $passedApiTests   | $failedApiTests   |" >> test-report-summary.md
      
          # Append UI test results to the Markdown file
          echo "| UI Tests     | $totalUiTests       | $passedUiTests   | $failedUiTests   |" >> test-report-summary.md

      - name: Comment on PR with test report summary
        if: env.build_failed != 'false'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: test-report-summary.md
          recreate: true

      - name: Make build pass or fail based on test results
        if: env.build_failed == 'true'
        run: |
          echo "Some tests failed. Failing the build."
          exit 1
