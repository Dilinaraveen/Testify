name: Pre merge cypress tests

on:
  pull_request:
    paths:
      - 'cypress/e2e/**'
      - 'cypress/support/**'

jobs:
  run-tests:
    name: Run Cypress Tests
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install dependencies
        run: npm install

      - name: Run Cypress tests
        run: npm run test-ui-headless

      - name: Upload Cypress test report
        uses: actions/upload-artifact@v3
        with:
          name: cypress-report
          path: |
            cypress/reports/merged-report.html
            cypress/reports/assets/

      - name: Discover report files
        id: discover-reports
        run: |
          # Find JSON report files for API and UI tests separately
          API_REPORT_FILES=$(find cypress/reports -type f -name 'merged-report.json')
          UI_REPORT_FILES=$(find cypress/reports -type f -name 'merged-report.json')
          echo "API_REPORT_FILES=${API_REPORT_FILES}" >> $GITHUB_ENV
          echo "UI_REPORT_FILES=${UI_REPORT_FILES}" >> $GITHUB_ENV

      - name: Extract test data from JSON files
        id: extract-test-data
        run: |
          # Initialize the Markdown file for the report summary
          echo "| **Category** | **Total Tests** | **Passed** | **Failed** |" > test-report-summary.md
          echo "|--------------|-----------------|------------|------------|" >> test-report-summary.md

          # Initialize variables to track if any tests failed
          echo "build_failed=false" >> $GITHUB_ENV

          # Process API report files
          totalApiTests=0
          passedApiTests=0
          failedApiTests=0
          for report_file in ${API_REPORT_FILES}; do
            if [ -f "$report_file" ]; then
              apiTests=$(jq '.stats.tests' "$report_file")
              apiPasses=$(jq '.stats.passes' "$report_file")
              apiFailures=$(jq '.stats.failures' "$report_file")

              totalApiTests=$((totalApiTests + apiTests))
              passedApiTests=$((passedApiTests + apiPasses))
              failedApiTests=$((failedApiTests + apiFailures))

              if [ "$apiFailures" -ne 0 ]; then
                echo "build_failed=true" >> $GITHUB_ENV
              fi
            fi
          done
          echo "| API Tests    | $totalApiTests       | $passedApiTests   | $failedApiTests   |" >> test-report-summary.md

          # Process UI report files
          totalUiTests=0
          passedUiTests=0
          failedUiTests=0
          for report_file in ${UI_REPORT_FILES}; do
            if [ -f "$report_file" ]; then
              uiTests=$(jq '.stats.tests' "$report_file")
              uiPasses=$(jq '.stats.passes' "$report_file")
              uiFailures=$(jq '.stats.failures' "$report_file")

              totalUiTests=$((totalUiTests + uiTests))
              passedUiTests=$((passedUiTests + uiPasses))
              failedUiTests=$((failedUiTests + uiFailures))

              if [ "$uiFailures" -ne 0 ]; then
                echo "build_failed=true" >> $GITHUB_ENV
              fi
            fi
          done
          echo "| UI Tests     | $totalUiTests       | $passedUiTests   | $failedUiTests   |" >> test-report-summary.md

      - name: Comment on PR with test report summary
        if: env.build_failed != 'false'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: test-report-summary.md
          recreate: true

      - name: Make build pass or fail based on test results
        if: env.build_failed == 'true'
        run: |
          echo "Some tests failed. Failing the build."
          exit 1
