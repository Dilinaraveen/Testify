name: Pre merge cypress tests

on:
  pull_request:
    paths:
      - 'cypress/e2e/**'
      - 'cypress/support/**'

jobs:
  run-tests:
    name: Run Cypress Tests
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install dependencies
        run: npm install

      - name: Run Cypress tests
        run: npm run test-headless

      - name: Upload Cypress test report
        uses: actions/upload-artifact@v3
        with:
          name: cypress-report
          path: |
            cypress/reports/merged-report.html
            cypress/reports/assets/

      - name: Discover report files
        id: discover-reports
        run: |
          # Find all JSON report files in the cypress/reports directory
          REPORT_FILES=$(find cypress/reports -type f -name 'merged-report.json')
          echo "REPORT_FILES=${REPORT_FILES}" >> $GITHUB_ENV

      - name: Extract test data from JSON files
        id: extract-test-data
        run: |
          # Initialize the Markdown file for the report summary
          echo "| **Total Tests** | **Passed** | **Failed** |" > test-report-summary.md
          echo "|-----------------|------------|------------|" >> test-report-summary.md
      
          # Initialize a variable to track if any tests failed
          echo "build_failed=false" >> $GITHUB_ENV

          # Loop through report files
          for report_file in ${REPORT_FILES}; do
            if [ -f "$report_file" ]; then
              echo "has_content=true" >> $GITHUB_ENV
              
              # Extract values from the JSON file using jq
              totalTests=$(jq '.stats.tests' "$report_file")
              passedTests=$(jq '.stats.passes' "$report_file")
              failedTests=$(jq '.stats.failures' "$report_file")
              
              # Check if there are any failed tests
              if [ "$failedTests" -ne 0 ]; then
                echo "build_failed=true" >> $GITHUB_ENV
              fi
      
              # Append test results to the Markdown file
              echo "| $totalTests     | $passedTests | $failedTests |" >> test-report-summary.md
            fi
          done

      - name: Comment on PR with test report summary
        if: env.has_content == 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: test-report-summary.md
          recreate: true

      - name: Make build pass or fail or test results after creating the report
        if: env.build_failed == 'true'
        run: |
          echo "Some tests failed. Failing the build."
          exit 1
