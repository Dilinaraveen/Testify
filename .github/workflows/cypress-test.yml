name: Pre merge cypress tests

on:
  pull_request:
    paths:
      - 'cypress/e2e/**'
      - 'cypress/support/**'

jobs:
  run-tests:
    name: Run Cypress Tests
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install dependencies
        run: npm install

      - name: Run Cypress tests
        run: npm run test-ui-headless

      - name: Upload Cypress test report
        uses: actions/upload-artifact@v3
        with:
          name: cypress-report
          path: |
            cypress/reports/merged-report.html
            cypress/reports/assets/

      - name: Extract test data from JSON files
        id: extract-test-data
        run: |
          # Initialize the Markdown file for the report summary
          echo "| **Test Type** | **Total Tests** | **Passed** | **Failed** |" > test-report-summary.md
          echo "|--------------|-----------------|------------|------------|" >> test-report-summary.md

          # Initialize variables to track test results
          api_total=0
          api_pass=0
          api_fail=0
          ui_total=0
          ui_pass=0
          ui_fail=0

          # Debugging: Check REPORT_FILES content
          echo "REPORT_FILES=${REPORT_FILES}"

          # Loop through report files
          for report_file in ${REPORT_FILES}; do
            if [ -f "$report_file" ]; then
              echo "Processing file: $report_file"
              
              # Parse each result in the JSON file
              jq -c '.results[]' "$report_file" | while read -r test; do
                file=$(echo "$test" | jq -r '.file')
                totalTests=$(echo "$test" | jq '[.suites[].tests | length] | add')
                passedTests=$(echo "$test" | jq '[.suites[].tests[] | select(.pass == true)] | length')
                failedTests=$(echo "$test" | jq '[.suites[].tests[] | select(.fail == true)] | length')

                if [[ "$file" == *"apiTests"* ]]; then
                  api_total=$((api_total + totalTests))
                  api_pass=$((api_pass + passedTests))
                  api_fail=$((api_fail + failedTests))
                elif [[ "$file" == *"uiTests"* ]]; then
                  ui_total=$((ui_total + totalTests))
                  ui_pass=$((ui_pass + passedTests))
                  ui_fail=$((ui_fail + failedTests))
                fi
              done
            fi
          done

          # Debugging: Print calculated values
          echo "API Tests - Total: $api_total, Passed: $api_pass, Failed: $api_fail"
          echo "UI Tests - Total: $ui_total, Passed: $ui_pass, Failed: $ui_fail"

          # Append results to the Markdown file
          echo "| API Tests    | $api_total      | $api_pass  | $api_fail  |" >> test-report-summary.md
          echo "| UI Tests     | $ui_total       | $ui_pass   | $ui_fail   |" >> test-report-summary.md


      - name: Comment on PR with test report summary
        if: always()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: test-report-summary.md
          recreate: true

      - name: Make build pass or fail based on test results
        if: env.build_failed == 'true'
        run: |
          echo "Some tests failed. Failing the build."
          exit 1
